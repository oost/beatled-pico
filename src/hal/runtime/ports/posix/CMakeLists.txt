message("Building simulator")

SET(RESOURCE_COMPILER xxd)
FILE(GLOB_RECURSE SHADER_FILES "${CMAKE_CURRENT_LIST_DIR}/shaders/*")
FOREACH(INPUT_FILE ${SHADER_FILES})
    # FILE(RELATIVE_PATH INPUT_FILE_RELATIVE ${CMAKE_CURRENT_LIST_DIR} ${INPUT_FILE})
    # SET(OUTPUT_FILE ${INPUT_FILE_RELATIVE}.h)
    SET(INPUT_FILE_RELATIVE $<PATH:RELATIVE_PATH,${INPUT_FILE},${CMAKE_CURRENT_LIST_DIR}>)
    SET(OUTPUT_FILE "${INPUT_FILE_RELATIVE}.h")
    message(${OUTPUT_FILE})
    add_custom_command(
          OUTPUT ${OUTPUT_FILE}
          COMMAND xxd -i ${INPUT_FILE_RELATIVE} ${CMAKE_CURRENT_BINARY_DIR}/${OUTPUT_FILE}
          WORKING_DIRECTORY ${CMAKE_CURRENT_LIST_DIR}
          DEPENDS ${INPUT_FILE}
    )        
    LIST(APPEND SHADER_HEADER_FILES ${OUTPUT_FILE})
ENDFOREACH()

add_custom_target(
  ShaderHeaders
  DEPENDS ${SHADER_HEADER_FILES}
)

target_sources(${CURRENT_LIBRARY_NAME} PUBLIC
  ${CMAKE_CURRENT_LIST_DIR}/startup.cpp
  ${CMAKE_CURRENT_LIST_DIR}/renderer.cpp
  ${CMAKE_CURRENT_LIST_DIR}/mtk_view_delegate.cpp
  ${CMAKE_CURRENT_LIST_DIR}/app_delegate.cpp
  ${CMAKE_CURRENT_LIST_DIR}/math.cpp
)

target_link_libraries(${CURRENT_LIBRARY_NAME}
  METAL_CPP
)

add_dependencies(${CURRENT_LIBRARY_NAME} ShaderHeaders)

target_include_directories(${CURRENT_LIBRARY_NAME}
    PUBLIC ${CMAKE_CURRENT_BINARY_DIR}
)

